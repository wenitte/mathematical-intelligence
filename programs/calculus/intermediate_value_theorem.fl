// ivt_proof.fl

// Type definitions and preludes
struct Interval {
  a: ℝ;
  b: ℝ;
  constraint: a < b
} →

struct ContinuousFunction {
  domain: Interval;
  f: ℝ → ℝ;
  continuity_property: ∀ε>0, ∃δ>0, ∀x∈domain, |f(x) - f(domain.a)| < ε
} → 

// Main theorem definition
theorem IVT() {
  assert(
    ∀(f: ContinuousFunction) ⇒
      ∀(k: ℝ) ⇒
        (
          (f(a) < k ∧ k < f(b)) ∨
          (f(b) < k ∧ k < f(a))
        ) →
        ∃(c: ℝ) ⇒ (
          c ∈ (a,b) ∧
          f(c) = k
        )
  )
} ↔ // Equivalence with its proof structure

// WLOG reduction
lemma WLOG_Reduction() {
  assume(f(a) < k < f(b)) ∧ // Conjunction because both cases must be handled
  assert(symmetric(case(f(b) < k < f(a))))
} →

// Supremum construction and properties
definition ConstructSupremumSet(f: ContinuousFunction, k: ℝ): Set[ℝ] {
  return {x ∈ [a,b] | f(x) < k}
} ∧ // Parallel construction with supremum

definition c(): ℝ {
  return sup(ConstructSupremumSet(f, k))
} → 

// Endpoint exclusion lemmas
lemma EndpointExclusion() {
  // Left endpoint
  assert(
    ∀(ε: ℝ) ⇒ ε > 0 →
    ∃(δ: ℝ) ⇒ (
      δ > 0 ∧
      ∀(x: ℝ) ⇒ x ∈ (a-δ,a+δ) →
      |f(x) - f(a)| < ε
    )
  ) ∧ // Conjunction with right endpoint case

  // Right endpoint
  assert(
    ∃(δ₂: ℝ) ⇒ (
      δ₂ > 0 ∧
      ∀(x: ℝ) ⇒ x ∈ (b-δ₂,b) →
      f(x) > k
    )
  )
} → // Leads to therefore conclusion

lemma SupremumInInterval() {
  assert(c ∈ (a,b))
} →

// Core supremum properties
lemma SupremumProperties() {
  assert(
    ∀(x: ℝ) ⇒ (
      (x < c → ∃(y: ℝ) ⇒ y ∈ S ∧ x < y) ∧
      (x > c → ∃(y: ℝ) ⇒ y ∉ S ∧ x > y)
    )
  )
} →

// Continuity argument
lemma ContinuityAtC() {
  assert(
    ∀(ε: ℝ) ⇒ ε > 0 →
    ∃(δ: ℝ) ⇒ (
      δ > 0 ∧
      ∀(x: ℝ) ⇒ x ∈ (c-δ,c+δ) →
      |f(x) - f(c)| < ε
    )
  )
} ∧ // Parallel with neighborhood arguments

// Neighborhood arguments
lemma NeighborhoodProperties() {
  // Left neighborhood
  assert(
    ∃(x₀: ℝ) ⇒ (
      x₀ ∈ (c-δ,c) ∧
      f(x₀) < k ∧
      |f(x₀) - f(c)| < ε →
      f(c) < k + ε
    )
  ) ∧

  // Right neighborhood
  assert(
    ∃(x₁: ℝ) ⇒ (
      x₁ ∈ (c,c+δ) ∧
      f(x₁) ≥ k ∧
      |f(x₁) - f(c)| < ε →
      f(c) > k - ε
    )
  )
} →

// Final squeeze argument
theorem SqueezeConclusion() {
  assert(
    ∀(ε: ℝ) ⇒ ε > 0 →
    k - ε < f(c) < k + ε →
    |f(c) - k| < ε →
    f(c) = k
  )
}
